name: Frontend CI

on:
  pull_request:
    paths: ["frontend/**"]
  push:
    branches: [main]
    paths: ["frontend/**"]
    tags: ['v*.*.*']   # build on releases too
  workflow_dispatch:

permissions:
  contents: read
  packages: write   # <-- required to push to GHCR

jobs:
  build:
    runs-on: [self-hosted, local-k8s]
    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/web
      TAG: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "frontend/package-lock.json"

      - name: Install deps
        run: npm ci
        working-directory: frontend

      - name: Build (Vite)
        # NOTE: do NOT pass API base here; runtime config comes from /config.js
        run: npm run build
        working-directory: frontend

      - name: Set release tag (if this is a semver tag)
        id: rel
        run: |
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "RELEASE_TAG=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          fi

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # If you still need a build-arg for local experiments, uncomment "build-args".
      - name: Build & Push web image
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          # build-args: |
          #   VITE_API_BASE_URL=${{ secrets.FRONTEND_API_BASE_URL }}
          tags: |
            ${{ env.IMAGE }}:${{ env.TAG }}
            ${{ env.IMAGE }}:dev
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max

      - name: Also tag with release tag (if present)
        if: ${{ steps.rel.outputs.RELEASE_TAG != '' }}
        run: |
          docker buildx imagetools create \
            --tag $IMAGE:${{ steps.rel.outputs.RELEASE_TAG }} \
            $IMAGE:$TAG

