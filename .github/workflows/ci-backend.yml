name: Backend CI

on:
  pull_request:
    branches: [main]
    paths:
      - "backend/**"
      - ".github/workflows/ci-backend.yml"
      - "backend/Dockerfile"
  push:
    branches: [main]
    tags: ["v*.*.*"]
    paths:
      - "backend/**"
      - ".github/workflows/ci-backend.yml"
      - "backend/Dockerfile"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

concurrency:
  group: ci-backend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test-and-build:
    runs-on: [self-hosted, local-k8s]
    env:
      IMAGE: ghcr.io/${{ github.repository_owner }}/api
      TAG_FULL: ${{ github.sha }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---- Establish a clean Docker config and PATH for plugins FIRST ----
      - name: Prepare Docker config dir (DOCKER_CONFIG)
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p "$RUNNER_TEMP/.docker/cli-plugins"
          echo "DOCKER_CONFIG=$RUNNER_TEMP/.docker" >> "$GITHUB_ENV"
          echo "Prepared DOCKER_CONFIG=$RUNNER_TEMP/.docker"

      # Install buildx plugin explicitly into $DOCKER_CONFIG/cli-plugins
      - name: Install docker-buildx plugin (fallback)
        shell: bash
        run: |
          set -euo pipefail
          if docker buildx version >/dev/null 2>&1; then
            echo "buildx already available (system plugin)"; exit 0
          fi
          OS="$(uname -s | tr '[:upper:]' '[:lower:]')"   # darwin / linux
          ARCH="$(uname -m)"
          case "$ARCH" in
            x86_64|amd64)  BX_ARCH=amd64 ;;
            arm64|aarch64) BX_ARCH=arm64 ;;
            *) echo "::error ::Unsupported arch: $ARCH"; exit 1 ;;
          esac
          BX_VER="v0.16.2"
          BX_URL="https://github.com/docker/buildx/releases/download/${BX_VER}/buildx-${BX_VER}.${OS}-${BX_ARCH}"
          curl -fsSL "$BX_URL" -o "$DOCKER_CONFIG/cli-plugins/docker-buildx"
          chmod +x "$DOCKER_CONFIG/cli-plugins/docker-buildx"
          docker buildx version

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: npm
          cache-dependency-path: backend/package-lock.json

      - name: Install deps
        working-directory: backend
        run: npm ci

      - name: Test
        working-directory: backend
        run: npm test -- --ci

      # ---- Multi-arch prereqs (after plugin is ensured) ----
      - name: Setup QEMU (multi-arch)
        uses: docker/setup-qemu-action@v3

      - name: Setup Docker Buildx (container driver)
        uses: docker/setup-buildx-action@v3
        with:
            install: true
            use: true
            driver: docker-container
            buildkitd-flags: --debug

      - name: Verify buildx availability
        shell: bash
        run: |
          set -euo pipefail
          docker buildx version
          docker buildx ls || true
          docker version  || true

      - name: Derive short/release tags
        id: meta
        shell: bash
        run: |
          echo "SHORT=${GITHUB_SHA:0:7}" >> "$GITHUB_OUTPUT"
          if [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            echo "RELEASE_TAG=${GITHUB_REF_NAME}" >> "$GITHUB_OUTPUT"
          else
            echo "RELEASE_TAG=" >> "$GITHUB_OUTPUT"
          fi

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & Push api image (multi-arch)
        id: build_push
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          platforms: linux/arm64,linux/amd64
          tags: |
            ${{ env.IMAGE }}:${{ env.TAG_FULL }}
            ${{ env.IMAGE }}:${{ steps.meta.outputs.SHORT }}
            ${{ env.IMAGE }}:dev
          cache-from: type=registry,ref=${{ env.IMAGE }}:buildcache
          cache-to: type=registry,ref=${{ env.IMAGE }}:buildcache,mode=max
          labels: |
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.source=${{ github.repository }}

      - name: Also tag with release tag (if present)
        if: ${{ steps.meta.outputs.RELEASE_TAG != '' }}
        run: |
          docker buildx imagetools create \
            --tag $IMAGE:${{ steps.meta.outputs.RELEASE_TAG }} \
            $IMAGE:${{ env.TAG_FULL }}

      - name: Show pushed digest & platforms
        shell: bash
        run: |
          echo "Digest: ${{ steps.build_push.outputs.digest }}"
          echo "Platforms (full SHA):"
          docker buildx imagetools inspect $IMAGE:${{ env.TAG_FULL }} | sed -n '/Platforms:/,/^$/p'
          echo "Platforms (:dev):"
          docker buildx imagetools inspect $IMAGE:dev | sed -n '/Platforms:/,/^$/p'

