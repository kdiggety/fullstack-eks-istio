name: Deploy Local K8s (Umbrella Helm)

on:
  push:
    branches: [ main ]
    tags: [ 'v*.*.*' ]   # deploy on release tags too
  workflow_dispatch:
    inputs:
      tag:
        description: "Optional image tag override (e.g., v0.1.0 or a commit SHA)"
        required: false

concurrency:
  group: deploy-local
  cancel-in-progress: true

permissions:
  contents: read
  packages: read   # optional GHCR secret creation step

jobs:
  deploy:
    runs-on: [self-hosted, local-k8s]
    env:
      NAMESPACE: sample
      WEB_IMAGE: ghcr.io/${{ github.repository_owner }}/web
      API_IMAGE: ghcr.io/${{ github.repository_owner }}/api

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve image tag (prefer input → release tag → full SHA)
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.tag || '' }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            TAG="${GITHUB_REF_NAME}"
          else
            TAG="${GITHUB_SHA}"      # match CI push tag exactly
          fi
          echo "TAG=$TAG" >> "$GITHUB_OUTPUT"
          echo "Using image tag: $TAG"

      - name: Show cluster context
        shell: bash
        run: |
          set -euo pipefail
          kubectl config current-context
          kubectl get nodes

      - name: Ensure namespace & sidecar injection
        shell: bash
        run: |
          set -euo pipefail
          kubectl get ns "$NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$NAMESPACE"
          kubectl label ns "$NAMESPACE" istio-injection=enabled --overwrite

      # Optional: create/refresh imagePullSecret for private GHCR images.
      # Provide repo/org secrets: GHCR_USERNAME (your GH username) and GHCR_TOKEN (PAT with read:packages).
      - name: Ensure GHCR imagePullSecret (optional)
        shell: bash
        env:
          GHCR_USERNAME: ${{ secrets.GHCR_USERNAME || '' }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN || '' }}
        run: |
          set -euo pipefail
          if [ -z "${GHCR_USERNAME}" ] || [ -z "${GHCR_TOKEN}" ]; then
            echo "GHCR credentials not provided; skipping imagePullSecret creation."
            exit 0
          fi
          SECRET_NAME=ghcr-pull
          kubectl -n "$NAMESPACE" delete secret "$SECRET_NAME" >/dev/null 2>&1 || true
          kubectl -n "$NAMESPACE" create secret docker-registry "$SECRET_NAME" \
            --docker-server=ghcr.io \
            --docker-username="$GHCR_USERNAME" \
            --docker-password="$GHCR_TOKEN"
          echo "Created secret $SECRET_NAME in namespace $NAMESPACE"
          # If your chart supports imagePullSecrets, wire it in values.yaml or add:
          #   --set imagePullSecrets[0].name=$SECRET_NAME
          # to the helm commands below.

      - name: Add helm repos
        shell: bash
        run: |
          set -euo pipefail
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Build/fetch subchart deps
        shell: bash
        run: helm dependency build "./helm/chart"

      - name: Helm upgrade (use GHCR images + resolved tag)
        shell: bash
        env:
          TAG: ${{ steps.vars.outputs.TAG }}
        run: |
          set -euo pipefail

          echo "Rendering (dry-run) to sanity-check values..."
          helm upgrade --install fullstack "./helm/chart" -n "$NAMESPACE" \
            --dry-run --debug \
            --set web.image.repository="$WEB_IMAGE" \
            --set web.image.tag="$TAG" \
            --set api.image.repository="$API_IMAGE" \
            --set api.image.tag="$TAG" \
            >/dev/null

          echo "Applying release..."
          helm upgrade --install fullstack "./helm/chart" \
            --namespace "$NAMESPACE" --create-namespace \
            --dependency-update \
            --set web.image.repository="$WEB_IMAGE" \
            --set web.image.tag="$TAG" \
            --set api.image.repository="$API_IMAGE" \
            --set api.image.tag="$TAG"

      - name: Wait for rollouts
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NAMESPACE" rollout status deploy/api --timeout=300s
          kubectl -n "$NAMESPACE" rollout status deploy/web --timeout=300s
          kubectl -n "$NAMESPACE" get pods -o wide

      - name: Smoke test through Istio
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n istio-system get svc istio-ingressgateway

          kubectl -n istio-system port-forward svc/istio-ingressgateway 8080:80 >/tmp/pf.log 2>&1 &
          PF_PID=$!

          # wait for port-forward
          if command -v nc >/dev/null 2>&1; then
            for i in {1..20}; do nc -z localhost 8080 && break || sleep 0.5; done
          else
            sleep 3
          fi

          echo "== /api/health =="
          curl -fsS "http://localhost:8080/api/health" | tee /tmp/health.json

          echo "== / (frontend first 10 lines) =="
          curl -fsS "http://localhost:8080/" | head -n 10

          kill "$PF_PID" || true

      - name: If failed, dump diagnostics
        if: failure()
        shell: bash
        run: |
          echo "---- Pods ----"
          kubectl -n "$NAMESPACE" get pods -o wide || true
          echo "---- Events (tail) ----"
          kubectl -n "$NAMESPACE" get events --sort-by=.lastTimestamp | tail -n 100 || true
          echo "---- API logs ----"
          kubectl -n "$NAMESPACE" logs deploy/api -c api --tail=200 || true
          echo "---- WEB logs ----"
          kubectl -n "$NAMESPACE" logs deploy/web -c web --tail=200 || true
