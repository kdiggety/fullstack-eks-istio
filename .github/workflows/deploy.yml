name: Deploy Local K8s (Umbrella Helm)

on:
  push:
    branches: [ main ]          # auto-trigger on merges/pushes to main
  workflow_dispatch:            # allow manual runs from Actions UI/CLI

permissions:
  contents: read
  packages: read

jobs:
  deploy:
    runs-on: [self-hosted, local-k8s]

    permissions:
      contents: read
      packages: read

    env:
      NAMESPACE: sample
      OWNER: ${{ github.repository_owner }}
      REPO:  ${{ github.event.repository.name }}
      WEB_IMAGE: ghcr.io/${{ github.repository_owner }}/web
      API_IMAGE: ghcr.io/${{ github.repository_owner }}/api

      # Optional: if images are private and you want docker pulls to use a secret
      GHCR_USERNAME: ${{ secrets.GHCR_USERNAME }}
      GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
      PULL_SECRET_NAME: ghcr-pull

      # Let gh CLI use the workflow token (has packages:read due to permissions above)
      GH_TOKEN: ${{ github.token }}

      # If your GHCR packages live under an ORG, set:
      #   GH_PACKAGES_SCOPE: org
      #   GH_PACKAGES_OWNER: your-org-name
      GH_PACKAGES_SCOPE: user
      GH_PACKAGES_OWNER: ${{ github.repository_owner }}

    steps:
      - name: Checkout (clean)
        uses: actions/checkout@v4
        with:
          clean: true
          fetch-depth: 0

      - name: Check prerequisites (gh, jq, buildx)
        shell: bash
        run: |
          set -euo pipefail
          command -v gh >/dev/null 2>&1 || { echo "::error ::gh CLI not found on runner"; exit 1; }
          command -v jq >/dev/null 2>&1 || { echo "::error ::jq not found on runner"; exit 1; }
          docker buildx version >/dev/null 2>&1 || { echo "::error ::docker buildx not available"; exit 1; }
          echo "Prereqs OK"

      - name: Ensure kubectl context & namespace
        shell: bash
        run: |
          set -euo pipefail
          kubectl config current-context
          kubectl get nodes -o wide
          kubectl get ns "$NAMESPACE" >/dev/null 2>&1 || kubectl create ns "$NAMESPACE"
          kubectl label ns "$NAMESPACE" istio-injection=enabled --overwrite

      - name: Login to GHCR for pulls (optional)
        if: ${{ env.GHCR_USERNAME != '' && env.GHCR_TOKEN != '' }}
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ env.GHCR_USERNAME }}
          password: ${{ env.GHCR_TOKEN }}

      - name: Ensure imagePullSecret on default SA (optional)
        if: ${{ env.GHCR_USERNAME != '' && env.GHCR_TOKEN != '' }}
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NAMESPACE" delete secret "$PULL_SECRET_NAME" --ignore-not-found
          kubectl -n "$NAMESPACE" create secret docker-registry "$PULL_SECRET_NAME" \
            --docker-server=ghcr.io \
            --docker-username="$GHCR_USERNAME" \
            --docker-password="$GHCR_TOKEN"
          kubectl -n "$NAMESPACE" patch serviceaccount default \
            --type merge \
            -p "{\"imagePullSecrets\":[{\"name\":\"${PULL_SECRET_NAME}\"}]}"

      - name: Helm repos & deps (umbrella chart)
        shell: bash
        run: |
          set -euo pipefail
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update
          pushd ./helm/chart >/dev/null
          rm -rf charts
          helm dependency update .
          helm dependency build .
          ls -l charts || true
          popd >/dev/null

      # ---------- Resolve LATEST TAGS INDEPENDENTLY (web & api) ----------
      - name: Resolve latest tags for web and api (independent)
        id: tags
        shell: bash
        run: |
          set -euo pipefail

          # helper: does <image>:<tag> exist?
          have_img() {
            docker buildx imagetools inspect "$1:$2" >/dev/null 2>&1
          }

          # pick correct packages API path
          gh_pkg_url() {
            local pkg="$1"
            if [ "${GH_PACKAGES_SCOPE:-user}" = "org" ]; then
              echo "/orgs/${GH_PACKAGES_OWNER}/packages/container/${pkg}/versions?per_page=200"
            else
              echo "/users/${GH_PACKAGES_OWNER}/packages/container/${pkg}/versions?per_page=200"
            fi
          }

          # newest GHCR tag list for a package (exclude 'latest'), newest first
          list_tags () {
            local pkg="$1" # 'web' or 'api'
            local url; url="$(gh_pkg_url "$pkg")"
            gh api -H "Accept: application/vnd.github+json" "$url" \
            | jq -r '
                [ .[] | {
                    updated_at,
                    tags: (.metadata.container.tags // [])
                  } ]
                | sort_by(.updated_at) | reverse
                | map(.tags[]) | unique
                | map(select(. != "latest"))
                | .[]'
          }

          # 1) latest main commit SHA
          echo "Resolving latest commit SHA on main…"
          LATEST_SHA=$(gh api -H "Accept: application/vnd.github+json" \
            "/repos/$OWNER/$REPO/commits/main" -q .sha)
          echo "Latest main SHA: $LATEST_SHA"

          # ---- Resolve WEB tag (prefer latest SHA, else newest available tag) ----
          WEB_TAG=""
          if have_img "$WEB_IMAGE" "$LATEST_SHA"; then
            WEB_TAG="$LATEST_SHA"
            echo "WEB: using latest main SHA ($WEB_TAG)"
          else
            echo "WEB: latest SHA not found; finding newest GHCR tag…"
            WEB_TAG=""
            # portable read loop (works on bash 3+)
            while IFS= read -r t; do
              [ -z "$t" ] && continue
              if have_img "$WEB_IMAGE" "$t"; then
                WEB_TAG="$t"
                break
              fi
            done < <(list_tags web || true)
            if [ -z "$WEB_TAG" ]; then
              echo "::error ::WEB: Could not resolve a usable tag (need packages:read? are tags present?)"
              exit 1
            fi
            echo "WEB: using newest available tag ($WEB_TAG)"
          fi

          # ---- Resolve API tag (prefer latest SHA, else newest available tag) ----
          API_TAG=""
          if have_img "$API_IMAGE" "$LATEST_SHA"; then
            API_TAG="$LATEST_SHA"
            echo "API: using latest main SHA ($API_TAG)"
          else
            echo "API: latest SHA not found; finding newest GHCR tag…"
            API_TAG=""
            while IFS= read -r t; do
              [ -z "$t" ] && continue
              if have_img "$API_IMAGE" "$t"; then
                API_TAG="$t"
                break
              fi
            done < <(list_tags api || true)
            if [ -z "$API_TAG" ]; then
              echo "::error ::API: Could not resolve a usable tag (need packages:read? are tags present?)"
              exit 1
            fi
            echo "API: using newest available tag ($API_TAG)"
          fi

          echo "WEB_TAG=$WEB_TAG" >> "$GITHUB_OUTPUT"
          echo "API_TAG=$API_TAG" >> "$GITHUB_OUTPUT"

      # ---------- Deploy using those tags (tag-based; no digest pinning) ----------
      - name: Helm upgrade (tag-based, independent web/api)
        shell: bash
        env:
          WEB_TAG: ${{ steps.tags.outputs.WEB_TAG }}
          API_TAG: ${{ steps.tags.outputs.API_TAG }}
        run: |
          set -euo pipefail
          echo "Deploying: web:$WEB_TAG  api:$API_TAG"
          helm upgrade --install fullstack "./helm/chart" \
            --namespace "$NAMESPACE" --create-namespace \
            --dependency-update \
            --set-string web.image.repository="$WEB_IMAGE" \
            --set-string web.image.tag="$WEB_TAG" \
            --set-string api.image.repository="$API_IMAGE" \
            --set-string api.image.tag="$API_TAG"

      - name: Wait for rollouts
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NAMESPACE" rollout status deploy/web --timeout=300s
          kubectl -n "$NAMESPACE" rollout status deploy/api --timeout=300s
          kubectl -n "$NAMESPACE" get pods -o wide

      # Optional: quick smoke
      - name: Smoke test through Istio
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n istio-system port-forward svc/istio-ingressgateway 8080:80 >/tmp/pf.log 2>&1 &
          PF_PID=$!
          sleep 3
          echo "== /api/health =="
          curl -fsS "http://localhost:8080/api/health" | tee /tmp/health.json
          echo "== /runtime-config.js (first line) =="
          curl -fsS "http://localhost:8080/runtime-config.js" | head -n 1 || true
          kill "$PF_PID" || true

