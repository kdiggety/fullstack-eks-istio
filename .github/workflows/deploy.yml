name: Deploy Local K8s

on:
  push:
    branches: [ main ]
    tags: ['v*.*.*']     # ← also deploy on release tags
  workflow_dispatch:
    inputs:
      tag:
        description: "Optional image tag override (e.g., v0.1.0)"
        required: false

concurrency:
  group: deploy-local
  cancel-in-progress: true

jobs:
  deploy:
    runs-on: [self-hosted, local-k8s]  # must match your runner's labels
    env:
      NAMESPACE: sample
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Resolve image tag
        id: vars
        shell: bash
        run: |
          set -euo pipefail
          if [ -n "${{ github.event.inputs.tag || '' }}" ]; then
            TAG="${{ github.event.inputs.tag }}"
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            TAG="${GITHUB_REF_NAME}"
          else
            TAG="${GITHUB_SHA::7}"
          fi
          printf 'TAG=%s\n' "$TAG" >> "$GITHUB_OUTPUT"
          echo "Using image tag: $TAG"

      # (optional but recommended) ensure images exist locally and load to cluster if needed
      - name: Ensure images exist locally and load into cluster
        shell: bash
        run: |
          set -euo pipefail
          TAG="${{ steps.vars.outputs.TAG }}"
          if ! docker image inspect "sample-api:$TAG" >/dev/null 2>&1; then
            echo "sample-api:$TAG missing; building…"
            docker build -t "sample-api:$TAG" "${{ github.workspace }}/backend"
          fi
          if ! docker image inspect "sample-frontend:$TAG" >/dev/null 2>&1; then
            echo "sample-frontend:$TAG missing; building…"
            docker build -t "sample-frontend:$TAG" "${{ github.workspace }}/frontend"
          fi
          if command -v minikube >/dev/null 2>&1; then
            echo "Detected minikube: loading images"
            minikube image load "sample-api:$TAG"
            minikube image load "sample-frontend:$TAG"
          elif command -v kind >/dev/null 2>&1; then
            echo "Detected kind: loading images"
            kind load docker-image "sample-api:$TAG"
            kind load docker-image "sample-frontend:$TAG"
          else
            echo "Assuming Docker Desktop Kubernetes: images are already visible to the cluster"
          fi

      - name: Ensure namespace & sidecar injection
        shell: bash
        run: |
          set -euo pipefail
          kubectl get ns "$NAMESPACE" || kubectl create ns "$NAMESPACE"
          kubectl label ns "$NAMESPACE" istio-injection=enabled --overwrite

      - name: Apply Services and Istio routing
        shell: bash
        run: |
          set -euo pipefail
          kubectl apply -f k8s/namespace.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/backend-service.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/frontend-service.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/istio/gateway.yaml
          kubectl -n "$NAMESPACE" apply -f k8s/istio/virtualservice.yaml

      - name: Ensure Deployments exist
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NAMESPACE" apply -f k8s/backend-deployment.yaml || true
          kubectl -n "$NAMESPACE" apply -f k8s/frontend-deployment.yaml || true

      - name: Update images to resolved TAG
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NAMESPACE" set image deploy/api api="sample-api:${{ steps.vars.outputs.TAG }}"
          kubectl -n "$NAMESPACE" set image deploy/web web="sample-frontend:${{ steps.vars.outputs.TAG }}"

      - name: Wait for rollouts
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n "$NAMESPACE" rollout status deploy/api --timeout=300s
          kubectl -n "$NAMESPACE" rollout status deploy/web --timeout=300s
          kubectl -n "$NAMESPACE" get pods -o wide

      - name: Smoke test through Istio
        shell: bash
        run: |
          set -euo pipefail
          kubectl -n istio-system get svc istio-ingressgateway
          kubectl -n istio-system port-forward svc/istio-ingressgateway 8080:80 >/tmp/pf.log 2>&1 &
          PF_PID=$!
          sleep 3
          echo "== /api/health =="
          curl -fsS http://localhost:8080/api/health | tee /tmp/health.json
          echo "== / (frontend, first 10) =="
          curl -fsS http://localhost:8080/ | head -n 10
          kill "$PF_PID" || true
