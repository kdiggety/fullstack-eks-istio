# =============================================================================
# Umbrella values.yaml
# =============================================================================

# -----------------------------------------------------------------------------
# Redis (Bitnami subchart)
# -----------------------------------------------------------------------------
redis:
  enabled: true
  architecture: standalone
  master:
    persistence:
      enabled: false                     # dev-friendly; enable in prod overlays
    podAnnotations:
      sidecar.istio.io/inject: "true"
    resources:
      requests:
        cpu: "100m"
        memory: "128Mi"
      limits:
        cpu: "500m"
        memory: "512Mi"
  auth:
    enabled: true
    existingSecret: redis-auth           # materialized from SealedSecret
    existingSecretPasswordKey: redis-password
  networkPolicy:
    enabled: true
    allowExternal: false
  metrics:
    enabled: false

# -----------------------------------------------------------------------------
# API (Node/Express backend) — your chart aliased as `api`
# -----------------------------------------------------------------------------
api:
  image:
    repository: sample-api
    tag: dev
    pullPolicy: IfNotPresent
  replicaCount: 1

  service:
    type: ClusterIP
    port: 80

  # Redis connection contract used by your api chart templates
  redis:
    host: "{{ .Release.Name }}-redis-master"   # e.g., fullstack-redis-master
    port: 6379
    passwordSecretName: redis-auth
    passwordSecretKey: redis-password

  # Optional: if your api chart supports envFromSecrets, this pulls JWT_SECRET
  envFromSecrets:
    - api-env

  # Optional direct env (keep empty unless needed)
  env: []

  probes:
    livenessPath: /healthz
    readinessPath: /readyz

  resources:
    requests:
      cpu: "100m"
      memory: "128Mi"
    limits:
      cpu: "500m"
      memory: "512Mi"

# -----------------------------------------------------------------------------
# Web (React/Vite frontend) — your chart aliased as `web`
# -----------------------------------------------------------------------------
web:
  image:
    repository: sample-frontend
    tag: dev
    pullPolicy: IfNotPresent
  replicaCount: 1

  service:
    type: ClusterIP
    port: 80

  # If your web chart supports envFromSecrets, this provides API_BASE at runtime.
  # (For Vite build-time vars, still inject with --build-arg in CI when building.)
  envFromSecrets:
    - web-env

  # Optional runtime env fallbacks
  env:
    - name: API_BASE
      value: "/api"

  resources:
    requests:
      cpu: "50m"
      memory: "64Mi"
    limits:
      cpu: "250m"
      memory: "256Mi"

# -----------------------------------------------------------------------------
# Istio ingress layer — your chart aliased as `istio`
# -----------------------------------------------------------------------------
istio:
  gateway:
    name: web-gateway
    hosts: ["*"]
    port: 80
  virtualService:
    name: fullstack-routing
    hosts: ["*"]
    gatewayName: web-gateway
    routes:
      web: { prefix: "/", service: web, port: 80 }
      api: { prefix: "/api", service: api, port: 80 }

# -----------------------------------------------------------------------------
# SealedSecrets — your chart aliased as `secrets`
# These ciphertexts are produced by `kubeseal` and render to:
#   - Secret web-env    with key: API_BASE
#   - Secret api-env    with key: JWT_SECRET
#   - Secret redis-auth with key: redis-password
# Commit ciphertext safely; never commit raw secrets.
# -----------------------------------------------------------------------------
secrets:
  sealed:
    webEnv:
      apiBase: "AgA9EQwmIvtQfcoK5fatMfEHeubFHmc6qwc8D/nMisUP3RsAn9uZDJkKTQDbn4qfIWPPI1Iz6CRnOZRQjktta5JQ4LXwNQBDRTml3vtW+g/HGfgh3PUUCsgckwBdsPywVRNUoAGW43bUNlDonVfrB6vGj5Yh19w13zGsua7Rx/gCygUSbWnmQAZWYusXAPFzKaiTMltuFEhDuc9CO5YKiDo0BvXOvTnJARjmuDMbxf4RJNvIAdG3nsRv1gTdO8HhmAdkfzbKf9drm/9Npr5CxYRnTNNfV8ei3RJ6MiC3/0RDSB/qQiovd+/FQSZf+2XR6Z67VzDYZl0i2PyWvF+XChIU5IR+o96f/921XTqrm15kb8hTcZjaVuCqjSW9wyR3H1i1+zM4BFiUo+ds4CLr8V/iWyM0w2XtTLBfE5JqWcNr//GJQZ3YQLi29XkSER/3U98uibCAsvGJBT2l2GLDrtxJEgZCpqk4FMohVATXSte2ndusTwlOoKRBDy2P9JVwhVm6gR/Tyj8LOvX2+Mrguu6zrVgf2cVKAecKA9zA+EwJltNMO7MUXzv0QWUMZc3D7WGDcr2mC0uPk/S06olC1p6F0Ycg2FLOs/ifgfgvMQArLK5gJXY6RdAvme94NHdruhoVPveSoyN2uIRn7RVyU1SMLeHA55T/k1PMhsmFTq4OfVapRNbqDfivob9bWTKnaRek9WCVxNw0e4/O"          # kubeseal ciphertext for API_BASE (e.g., "/api" or "https://dev.example.com/api")
    apiEnv:
      jwtSecret: "AgClg+mBsyYLomZz9olRNLmRlCWTMtZjJ61q3yXmsTrFJcF8pZb5QKqzruFf7aX0J8okkKJBOeVX1Bp0uoTZ/84dNEKS3flHh2gRSZgod3Kj5zleuDmx03LU7XwkM880RqcocfSmi1E+2Qszw9hL20awiY6p+zcY0BZCwfFOCOe1Q19XcwYQvprg7cwjD5wO6HcAbtIAnPIq6YAvMgOdrPamuQJooJpVW9oMFWowMmv/z4RHhJFabquEjTdpkhCi1CGknnv8S7h0csQLmQug6+7377G/7imO2pCV4LGwKrlzczt/atBKTm295tfrKpsSBZd5/RBHlxDMxFIXP9iLeHt+UuE6V0ca6gEFacUgEqr63Bqhv+z+QPW4zOPE4W3D5kqTXK8rnncoSJd13fXEJbgB10gmg4Q56CPVDFhJ9lt5t9SN0gkjEX9bhdRwggj6EsIj9h2U3zyiqTahUELO2Zavi7zf/k7pDTT5JBeot+laWnt0jKDRi5JEI9Uo9UQvJf1PJy6jeOkKuOGdbA47gTJMIf+x5wqFtaaEw8mTK7HhbF2gPcEIeppNkyngc9VsMjsE/9YYyoy6MAjpKBhkA7QIOO2IfrEIdxkeW7QrwLgXlPr+Ti3/YYLcQfoIWbuw6kV7LA9MMXxowr32yepbfnvang1r9T72MXhIDn24NqMk/+LNLEh9bEmu9LlO95nlL3Wx7wPFzNV3RbGU"        # kubeseal ciphertext for JWT_SECRET
    redisAuth:
      password: "AgBuQEtTwNwHmSX56MR7yYGmtgMA5VfRfUpiTqLLElXDpsbW3FOS8Lo4PK9XwUDoCAV2Ux4FsbUIcmFr94ZmX+mjoGvtWkdAX5ABlQzAPh5XUdVwzUXk74mcMFXy99wGhSrz/wNGM8olDWJd0RS5AEPdONflX/HZDKeu2QitnBk+8ldOVTZo40o6pxobnhh9hjU3P0Nloe1T7l85FQ6ASYivL+xjoVK/xiy7z9KLIdQfjMYiq4K1nDCc5CXWbTG+6m+HivNHHqOBuCwpMTX0+DDsg+01OD/R+E5oqGaB8ebB+IFlbS8syruNV1+2u0HLx83mOH+cTSvPCpuq45M+x87hd1ci41C1cn63c/Iu1KNHYlSejhmFbI4buHK16rf8xvc3xXcB5sFzqw9g/pXsIzegzxvdLYDI7HCVxAslP3NzSNMPwiIEIxQF1oxhtZtIy057+2zqvHpk+G0NjKURvCLKtdqia9wxxP3J+3a3+KClV7UQXG/O3xxnxIWvePYszVOPbBGUSCyKY+Qn5CvYRj8D5htg92rMusyQu04rrxg7pNMDuQt920P7o43tsag+E8n67xQ0OuPLYuohkFU42yRXljHbuLRGCv8l+5DgSBlBmq6am2jp16R3IqeSHBD9xfS3RRuNL3lSmf7tH7u6ppacqqdGOd3xHxt/Q4ypPMpGp/63N3Nb6TyuVsRZK+p0MVFt+/I/0HgcfEgF"         # kubeseal ciphertext for redis-password
