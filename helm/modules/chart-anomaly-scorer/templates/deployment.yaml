apiVersion: apps/v1
kind: Deployment
metadata:
  name: anomaly-scorer
  labels: { app: anomaly-scorer }
spec:
  replicas: {{ .Values.replicaCount | default 1 }}
  selector:
    matchLabels: { app: anomaly-scorer }
  template:
    metadata:
      labels: { app: anomaly-scorer }
      annotations:
        sidecar.istio.io/inject: "true"
    spec:
      # Pod-level security context (override via values if needed)
      securityContext:
        runAsNonRoot: {{ default true  .Values.podSecurityContext.runAsNonRoot }}
        runAsUser:    {{ default 10001 .Values.podSecurityContext.runAsUser }}
        runAsGroup:   {{ default 10001 .Values.podSecurityContext.runAsGroup }}
        fsGroup:      {{ default 10001 .Values.podSecurityContext.fsGroup }}

      # Optional imagePullSecrets (renders nothing if empty)
      {{- $ips := .Values.image.imagePullSecrets | default (list) }}
      {{- if gt (len $ips) 0 }}
      imagePullSecrets:
      {{- range $ips }}
        - name: {{ .name | quote }}
      {{- end }}
      {{- end }}

      # SAFE probe defaults (works for nil/map/scalar values)
      {{- $rp := .Values.readinessProbe | default (dict) }}
      {{- $lp := .Values.livenessProbe  | default (dict) }}
      {{- $rpInit := 3 }}
      {{- $rpPeriod := 5 }}
      {{- $lpInit := 10 }}
      {{- $lpPeriod := 10 }}
      {{- if kindIs "map" $rp }}
        {{- $rpInit = default 3 ($rp.initialDelaySeconds) }}
        {{- $rpPeriod = default 5 ($rp.periodSeconds) }}
      {{- else if kindIs "int" $rp }}
        {{- $rpInit = $rp }}
      {{- else if kindIs "float64" $rp }}
        {{- $rpInit = ($rp | int) }}
      {{- end }}
      {{- if kindIs "map" $lp }}
        {{- $lpInit = default 10 ($lp.initialDelaySeconds) }}
        {{- $lpPeriod = default 10 ($lp.periodSeconds) }}
      {{- else if kindIs "int" $lp }}
        {{- $lpInit = $lp }}
      {{- else if kindIs "float64" $lp }}
        {{- $lpInit = ($lp | int) }}
      {{- end }}

      containers:
        - name: anomaly-scorer
          {{- $g     := (default (dict) .Values.global) }}
          {{- $gimg  := (get $g "image" | default (dict)) }}
          {{- $reg   := (get $gimg "registry" | default "ghcr.io") }}
          {{- $owner := (get $gimg "owner"    | default "") }}
          
          {{- $repo := (default "" .Values.image.repository) }}
          {{- if not $repo }}
            {{- $owner = required "Set global.image.owner (e.g. --set-string global.image.owner=$OWNER) or provide image.repository" $owner }}
            {{- $repo = printf "%s/%s/anomaly-scorer" $reg $owner }}
          {{- else }}
            {{- if and $reg (not (hasPrefix (printf "%s/" $reg) (printf "%s/" $repo))) }}
              {{- $repo = printf "%s/%s" $reg $repo }}
            {{- end }}
          {{- end }}
          
          {{- $tag := (default (get $gimg "tag" | default "latest") .Values.image.tag) }}
          image: "{{ $repo }}:{{ $tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy | default "IfNotPresent" }}

          ports:
            - name: http
              containerPort: {{ .Values.service.port | default 8080 }}

          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ $rpInit }}
            periodSeconds:       {{ $rpPeriod }}

          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: {{ $lpInit }}
            periodSeconds:       {{ $lpPeriod }}

          {{- if kindIs "map" .Values.resources }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- else }}
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "250m"
              memory: "256Mi"
          {{- end }}

          # Container-level hardening
          securityContext:
            allowPrivilegeEscalation: false

